/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

javafx {
    version = "19.0.2.1"
    modules = [ 'javafx.controls', 'javafx.fxml'  ]
}


dependencies {
    // Use JUnit Jupiter for testing.
    
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    testImplementation 'org.mockito:mockito-core:3+'
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    //Testing for Java FX
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
    
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // SLF4J API
    implementation 'org.slf4j:slf4j-api:1.7.36'
    // Log4j2实现
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    // SLF4J与Log4j2的绑定
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.0")
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.0")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.0")

}

application {
    // Define the main class for the application.
    mainClass = 'productsimulation.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
test{
//    maxParallelForks = 1 // 限制并行测试
//    forkEvery = 1 // 每个测试fork一个新的JVM进程
    testLogging{
        showStandardStreams=true
        exceptionFormat='full'
        events = ["passed", "failed", "skipped"]
    }
}
clover{
    compiler {
        additionalArgs = "-g:lines,source,vars"
    }
    report {
        xml=true
        html = true
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
